package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;

import java.util.List;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private MemberRepository mr;

	@Autowired
	private PhoneRepository pr;


	@GetMapping(path="/init")
	public @ResponseBody Flux<Member> init() {
//		Member first = new Member("Jung"); // (1)
//		first.addPhone(new Phone("010-XXXX-XXXX"));
//		first.addPhone(new Phone("010-YYYY-YYYY"));
//
//		Member second = new Member("Dong");
//		second.addPhone(new Phone("010-ZZZZ-ZZZZ"));
//
//		Member third = new Member("Min"); // (2)
//
//		mr.save(first); // (3)
//		mr.save(second);
//		mr.save(third); // (4)

		Flux<Member> list = mr.findAll(); // (5)
		return list;
	}

	@GetMapping(path="/mlist")
	public @ResponseBody Flux<Member> mlist() {
		return mr.findAll()
				.collectMap(Member::getSeq)
				.flatMapMany(members -> pr.findAllWithMembers(members.keySet())
						.bufferUntilChanged(Phone::getMemberId)
						.map(phones -> {
							return members.get(phones.get(0).getMemberId()).update(phones);
						})
				);
	}

	@GetMapping(path="/mlist/{name}")
	public @ResponseBody Flux<Member> mlist(@PathVariable String name) {
		return mr.findByName(name)
				.collectMap(Member::getSeq)
				.flatMapMany(members -> pr.findAllWithMembers(members.keySet())
						.bufferUntilChanged(Phone::getMemberId)
						.map(phones -> {
							return members.get(phones.get(0).getMemberId()).update(phones);
						})
				);
	}


//	@PostMapping(path="/add") // Map ONLY POST Requests
//	public @ResponseBody String addNewUser (@RequestParam String name
//			, @RequestParam String email) {
//		// @ResponseBody means the returned String is the response, not a view name
//		// @RequestParam means it is a parameter from the GET or POST request
//
//		User n = new User();
//		n.setName(name);
//		n.setEmail(email);
//		userRepository.save(n);
//		return "Saved";
//	}

	@GetMapping(path="/all")
	public @ResponseBody Flux<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
